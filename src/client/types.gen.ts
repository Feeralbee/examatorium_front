// This file is auto-generated by @hey-api/openapi-ts

export type Body_create_qualifications_post = {
  data: CreateQualificationRequest;
  competencies: Array<string>;
};

export type Body_update_qualifications_patch = {
  data: UpdateQualificationRequest;
  competencies: Array<string>;
};

export type CompetenceDomainEntity = {
  id: string;
  name: string;
  type: CompetenceTypes;
  index: string;
};

export type CompetenceTypes = "professional" | "general";

export type CourseWorkDomainEntity = {
  id: string;
  discipline_id: string;
  discipline: DisciplineDomainEntity;
  teacher_id: string;
  teacher: UserDomainEntity;
  group_id: string;
  group: GroupDomainEntity;
};

export type CreateCompetenceRequest = {
  name: string;
  type: CompetenceTypes;
  index: string;
};

export type CreateCourseWorkRequest = {
  discipline_id: string;
  teacher_id: string;
  group_id: string;
};

export type CreateDisciplineRequest = {
  name: string;
  index: string;
};

export type CreateEducationalPracticeRequest = {
  teacher_id: string;
  group_id: string;
  name: string;
  hours_count: number;
};

export type CreateExamRequest = {
  discipline_id: string;
  teacher_id: string;
  group_id: string;
  semester: number;
};

export type CreateGraduateThesisRequest = {
  group_id: string;
};

export type CreateGroupRequest = {
  name: string;
  qualification_id: string;
  speciality: string;
};

export type CreateQualificationRequest = {
  index: string;
  name: string;
};

export type CreateQuestionRequest = {
  name: string;
  is_task_question?: boolean;
  theme_id: string;
};

export type CreateThemeRequest = {
  name: string;
  exam_id: string;
};

export type CreateUserRequest = {
  login: string;
  name: string;
  surname: string;
  patronymic?: string | null;
  role: UserRoles;
  password: string;
};

export type DisciplineDomainEntity = {
  id: string;
  name: string;
  index: string;
};

export type EducationalPracticeDomainEntity = {
  id: string;
  teacher_id: string;
  teacher: UserDomainEntity;
  group_id: string;
  group: GroupDomainEntity;
  name: string;
  hours_count: number;
};

export type ExamDomainEntity = {
  id: string;
  discipline_id: string;
  discipline: DisciplineDomainEntity;
  teacher_id: string;
  teacher: UserDomainEntity;
  group_id: string;
  group: GroupDomainEntity;
  semester: number;
};

export type GraduateThesisDomainEntity = {
  id: string;
  group_id: string;
  group: GroupDomainEntity;
};

export type GroupDomainEntity = {
  id: string;
  name: string;
  qualification_id: string;
  students: Array<UserDomainEntity>;
  qualification: QualificationDomainEntity;
  speciality: string;
};

export type GroupStudentDomainEntity = {
  id: string;
  student_id: string;
  group_id: string;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type QualificationDomainEntity = {
  id: string;
  index: string;
  name: string;
  competencies: Array<CompetenceDomainEntity>;
};

export type QuestionDomainEntity = {
  id: string;
  name: string;
  is_task_question?: boolean;
  theme_id: string;
};

export type QuestionsCount = {
  all: number;
  task_questions: number;
};

export type ThemeDomainEntity = {
  id: string;
  name: string;
  exam_id: string;
  exam: ExamDomainEntity;
  questions: Array<QuestionDomainEntity>;
};

export type UpdateCompetenceRequest = {
  id: string;
  name: string;
  type: CompetenceTypes;
  index: string;
};

export type UpdateCourseWorkRequest = {
  id: string;
  discipline_id?: string | null;
  teacher_id?: string | null;
  group_id?: string | null;
};

export type UpdateDisciplineRequest = {
  id: string;
  name: string;
  index: string;
};

export type UpdateEducationalPracticeRequest = {
  id: string;
  teacher_id?: string | null;
  group_id?: string | null;
  name?: string | null;
  hours_count?: number | null;
};

export type UpdateExamRequest = {
  id: string;
  discipline_id?: string | null;
  teacher_id?: string | null;
  group_id?: string | null;
  semester?: number | null;
};

export type UpdateGraduateThesisRequest = {
  id: string;
  group_id?: string | null;
};

export type UpdateGroupRequest = {
  id: string;
  name?: string | null;
  qualification_id?: string | null;
  speciality: string;
};

export type UpdateQualificationRequest = {
  id: string;
  index: string;
  name: string;
};

export type UpdateQuestionRequest = {
  id: string;
  name: string;
  is_task_question?: boolean;
  theme_id: string;
};

export type UpdateThemeRequest = {
  id: string;
  name: string;
  exam_id: string;
};

export type UpdateUserPasswordRequest = {
  id: string;
  password: string;
};

export type UpdateUserRequest = {
  id: string;
  login?: string | null;
  name?: string | null;
  surname?: string | null;
  patronymic?: string | null;
  role?: UserRoles | null;
  is_blocked?: boolean | null;
};

export type UserDomainEntity = {
  id: string;
  login: string;
  name: string;
  surname: string;
  patronymic?: string | null;
  role: UserRoles;
  is_blocked: boolean;
  password: string;
};

export type UserRoles = "student" | "teacher" | "admin";

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type $OpenApiTs = {
  "/users/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<UserDomainEntity>;
      };
    };
  };
  "/users/{user_id}": {
    get: {
      req: {
        userId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        userId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users": {
    get: {
      req: {
        login: string;
        password: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: {
        requestBody: CreateUserRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateUserRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users/password": {
    patch: {
      req: {
        requestBody: UpdateUserPasswordRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/themes/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ThemeDomainEntity>;
      };
    };
  };
  "/themes/{theme_id}": {
    get: {
      req: {
        themeId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: ThemeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/themes": {
    post: {
      req: {
        requestBody: CreateThemeRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ThemeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateThemeRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ThemeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/themes/questions": {
    post: {
      req: {
        requestBody: CreateQuestionRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        id: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/themes/{themes_id}": {
    delete: {
      req: {
        themeId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ExamDomainEntity>;
      };
    };
  };
  "/exams/teacher": {
    get: {
      req: {
        teacherId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<ExamDomainEntity>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams/student": {
    get: {
      req: {
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<ExamDomainEntity>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams/questions": {
    get: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<ThemeDomainEntity>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams/questions_count": {
    get: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionsCount;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams/tickets": {
    get: {
      req: {
        examId: string;
        questionsCount: number;
        taskQuestionsCount: number;
        ticketsCount: number;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams/{exam_id}": {
    get: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: ExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams": {
    post: {
      req: {
        requestBody: CreateExamRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateExamRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<GroupDomainEntity>;
      };
    };
  };
  "/groups/students": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<GroupStudentDomainEntity>;
      };
    };
  };
  "/groups/student_group": {
    get: {
      req: {
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity | null;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups/add_student": {
    post: {
      req: {
        groupId: string;
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups/remove_student": {
    post: {
      req: {
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups/{group_id}": {
    get: {
      req: {
        groupId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        groupId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups": {
    post: {
      req: {
        requestBody: CreateGroupRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateGroupRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/questions/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<QuestionDomainEntity>;
      };
    };
  };
  "/questions/{question_id}": {
    get: {
      req: {
        questionId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        questionId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/questions": {
    post: {
      req: {
        requestBody: CreateQuestionRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateQuestionRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/competencies/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<CompetenceDomainEntity>;
      };
    };
  };
  "/competencies/{competence_id}": {
    get: {
      req: {
        competenceId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: CompetenceDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        competenceId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/competencies": {
    post: {
      req: {
        requestBody: CreateCompetenceRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: CompetenceDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateCompetenceRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: CompetenceDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/disciplines/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<DisciplineDomainEntity>;
      };
    };
  };
  "/disciplines/{discipline_id}": {
    get: {
      req: {
        disciplineId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: DisciplineDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        disciplineId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/disciplines": {
    post: {
      req: {
        requestBody: CreateDisciplineRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: DisciplineDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateDisciplineRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: DisciplineDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/qualifications/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<QualificationDomainEntity>;
      };
    };
  };
  "/qualifications/{qualification_id}": {
    get: {
      req: {
        qualificationId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        qualificationId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/qualifications": {
    post: {
      req: {
        requestBody: Body_create_qualifications_post;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: Body_update_qualifications_patch;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/educational_practices/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<EducationalPracticeDomainEntity>;
      };
    };
  };
  "/educational_practices/student": {
    get: {
      req: {
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<EducationalPracticeDomainEntity>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/educational_practices/pages": {
    get: {
      req: {
        educationalPracticeId: string;
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/educational_practices/{educational_practice_id}": {
    get: {
      req: {
        educationalPracticeId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: EducationalPracticeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/educational_practices": {
    post: {
      req: {
        requestBody: CreateEducationalPracticeRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: EducationalPracticeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateEducationalPracticeRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: EducationalPracticeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/educational_practices/educational_practice_id}": {
    delete: {
      req: {
        educationalPracticeId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/graduate_theses/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<GraduateThesisDomainEntity>;
      };
    };
  };
  "/graduate_theses/student": {
    get: {
      req: {
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<GraduateThesisDomainEntity>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/graduate_theses/pages": {
    get: {
      req: {
        graduateThesisId: string;
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/graduate_theses/{graduate_thesis_id}": {
    get: {
      req: {
        graduateThesisId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: GraduateThesisDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/graduate_theses": {
    post: {
      req: {
        requestBody: CreateGraduateThesisRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: GraduateThesisDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateGraduateThesisRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: GraduateThesisDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/graduate_theses/{course_work_id}": {
    delete: {
      req: {
        graduateThesisId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/course_works/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<CourseWorkDomainEntity>;
      };
    };
  };
  "/course_works/student": {
    get: {
      req: {
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<CourseWorkDomainEntity>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/course_works/pages": {
    get: {
      req: {
        courseWorkId: string;
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/course_works/{course_work_id}": {
    get: {
      req: {
        courseWorkId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: CourseWorkDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        courseWorkId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/course_works": {
    post: {
      req: {
        requestBody: CreateCourseWorkRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: CourseWorkDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateCourseWorkRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: CourseWorkDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
};
