// This file is auto-generated by @hey-api/openapi-ts

export type CompetenceDomainEntity = {
  id: string | null;
  name: string;
  type: CompetenceTypes;
  index: string;
};

export type CompetenceTypes = "professional" | "general";

export type CreateCompetenceRequest = {
  name: string;
  type: CompetenceTypes;
  index: string;
};

export type CreateDisciplineRequest = {
  name: string;
  index: string;
};

export type CreateExamRequest = {
  discipline_id: string;
  teacher_id: string;
  group_id: string;
  semester: number;
};

export type CreateGroupRequest = {
  name: string;
  qualification_id: string;
};

export type CreateQualificationExamRequest = {
  discipline_id: string;
  teacher_id: string;
  group_id: string;
  semester: number;
};

export type CreateQualificationRequest = {
  index: string;
  name: string;
};

export type CreateQuestionRequest = {
  name: string;
  is_task_question?: boolean;
  discipline_id: string;
};

export type CreateThemeRequest = {
  name: string;
  discipline_id: string;
};

export type CreateUserRequest = {
  login: string;
  name: string;
  surname: string;
  patronymic?: string | null;
  role: UserRoles;
  password: string;
};

export type DisciplineDomainEntity = {
  id: string | null;
  name: string;
  index: string;
};

export type ExamDomainEntity = {
  id: string | null;
  discipline_id: string;
  discipline: DisciplineDomainEntity;
  teacher_id: string;
  teacher: UserDomainEntity;
  group_id: string;
  group: GroupDomainEntity;
  semester: number;
};

export type GroupDomainEntity = {
  id: string | null;
  name: string;
  qualification_id: string;
  students: Array<UserDomainEntity>;
  qualification: QualificationDomainEntity;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type QualificationCommissionMemberDomainEntity = {
  id: string | null;
  name: string;
  surname: string;
  patronymic: string;
};

export type QualificationDomainEntity = {
  id: string | null;
  index: string;
  name: string;
  competencies: Array<CompetenceDomainEntity>;
};

export type QualificationExamDomainEntity = {
  id: string | null;
  discipline_id: string;
  discipline: DisciplineDomainEntity;
  teacher_id: string;
  teacher: UserDomainEntity;
  group_id: string;
  group: GroupDomainEntity;
  semester: number;
  members: Array<QualificationCommissionMemberDomainEntity>;
};

export type QuestionDomainEntity = {
  id: string | null;
  name: string;
  is_task_question?: boolean;
  theme_id: string;
  theme: ThemeDomainEntity;
};

export type ThemeDomainEntity = {
  id: string | null;
  name: string;
  discipline_id: string;
  discipline: DisciplineDomainEntity;
};

export type UpdateCompetenceRequest = {
  id: string;
  name: string;
  type: CompetenceTypes;
  index: string;
};

export type UpdateDisciplineRequest = {
  id: string;
  name: string;
  index: string;
};

export type UpdateExamRequest = {
  id: string;
  discipline_id?: string | null;
  teacher_id?: string | null;
  group_id?: string | null;
  semester?: number | null;
};

export type UpdateGroupRequest = {
  id: string;
  name?: string | null;
  type?: string | null;
  index?: string | null;
};

export type UpdateQualificationExamRequest = {
  id: string;
  discipline_id: string;
  teacher_id: string;
  group_id: string;
  semester: number;
};

export type UpdateQualificationRequest = {
  id: string;
  index: string;
  name: string;
};

export type UpdateQuestionRequest = {
  id: string;
  name: string;
  is_task_question?: boolean;
  discipline_id: string;
};

export type UpdateThemeRequest = {
  id: string;
  name: string;
  discipline_id: string;
};

export type UpdateUserPasswordRequest = {
  id: string;
  password: string;
};

export type UpdateUserRequest = {
  id: string;
  login?: string | null;
  name?: string | null;
  surname?: string | null;
  patronymic?: string | null;
  role?: UserRoles | null;
  is_blocked?: boolean | null;
};

export type UserDomainEntity = {
  id: string | null;
  login: string;
  name: string;
  surname: string;
  patronymic?: string | null;
  role: UserRoles;
  is_blocked: boolean;
  password: string;
};

export type UserRoles = "student" | "teacher" | "admin";

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type $OpenApiTs = {
  "/users/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<UserDomainEntity>;
      };
    };
  };
  "/users/{user_id}": {
    get: {
      req: {
        userId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        userId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users": {
    get: {
      req: {
        login: string;
        password: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: {
        requestBody: CreateUserRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateUserRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users/password": {
    patch: {
      req: {
        requestBody: UpdateUserPasswordRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: UserDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/themes/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ThemeDomainEntity>;
      };
    };
  };
  "/themes/{theme_id}": {
    get: {
      req: {
        themeId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: ThemeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/themes": {
    post: {
      req: {
        requestBody: CreateThemeRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ThemeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateThemeRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ThemeDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/themes/{themes_id}": {
    delete: {
      req: {
        themeId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ExamDomainEntity>;
      };
    };
  };
  "/exams/{exam_id}": {
    get: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: ExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/exams": {
    post: {
      req: {
        requestBody: CreateExamRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateExamRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: ExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/qual_exams/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<QualificationExamDomainEntity>;
      };
    };
  };
  "/qual_exams/{exam_id}": {
    get: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        examId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/qual_exams": {
    post: {
      req: {
        requestBody: CreateQualificationExamRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateQualificationExamRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationExamDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<GroupDomainEntity>;
      };
    };
  };
  "/groups/add_student": {
    post: {
      req: {
        groupId: string;
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups/remove_student": {
    post: {
      req: {
        studentId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups/{group_id}": {
    get: {
      req: {
        groupId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        groudId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/groups": {
    post: {
      req: {
        requestBody: CreateGroupRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateGroupRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: GroupDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/questions/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<QuestionDomainEntity>;
      };
    };
  };
  "/questions/{question_id}": {
    get: {
      req: {
        questionId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        questionId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/questions": {
    post: {
      req: {
        requestBody: CreateQuestionRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateQuestionRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QuestionDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/competencies/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<CompetenceDomainEntity>;
      };
    };
  };
  "/competencies/{competence_id}": {
    get: {
      req: {
        competenceId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: CompetenceDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        competenceId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/competencies": {
    post: {
      req: {
        requestBody: CreateCompetenceRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: CompetenceDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateCompetenceRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: CompetenceDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/disciplines/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<DisciplineDomainEntity>;
      };
    };
  };
  "/disciplines/{discipline_id}": {
    get: {
      req: {
        disciplineId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: DisciplineDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        disciplineId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/disciplines": {
    post: {
      req: {
        requestBody: CreateDisciplineRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: DisciplineDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateDisciplineRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: DisciplineDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/qualifications/all": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<QualificationDomainEntity>;
      };
    };
  };
  "/qualifications/{qualification_id}": {
    get: {
      req: {
        qualificationId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        qualificationId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/qualifications": {
    post: {
      req: {
        requestBody: CreateQualificationRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: {
        requestBody: UpdateQualificationRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: QualificationDomainEntity;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
};
