// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type { $OpenApiTs } from "./types.gen";

export class UsersService {
  /**
   * Get All Users
   * @returns UserDomainEntity Successful Response
   * @throws ApiError
   */
  public static getAllUsersUsersAllGet(): CancelablePromise<
    $OpenApiTs["/users/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/all",
    });
  }

  /**
   * Get User By Id
   * @param data The data for the request.
   * @param data.userId
   * @returns UserDomainEntity Successful Response
   * @throws ApiError
   */
  public static getUserByIdUsersUserIdGet(
    data: $OpenApiTs["/users/{user_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/users/{user_id}"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete User
   * @param data The data for the request.
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteUserUsersUserIdDelete(
    data: $OpenApiTs["/users/{user_id}"]["delete"]["req"],
  ): CancelablePromise<$OpenApiTs["/users/{user_id}"]["delete"]["res"][200]> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get User By Authorization
   * @param data The data for the request.
   * @param data.login
   * @param data.password
   * @returns UserDomainEntity Successful Response
   * @throws ApiError
   */
  public static getUserByAuthorizationUsersGet(
    data: $OpenApiTs["/users"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/users"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users",
      query: {
        login: data.login,
        password: data.password,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create User
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserDomainEntity Successful Response
   * @throws ApiError
   */
  public static createUserUsersPost(
    data: $OpenApiTs["/users"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/users"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/users",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update User
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateUserUsersPatch(
    data: $OpenApiTs["/users"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/users"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/users",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update User Password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateUserPasswordUsersPasswordPatch(
    data: $OpenApiTs["/users/password"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/users/password"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/users/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class ThemesService {
  /**
   * All
   * @returns ThemeDomainEntity Successful Response
   * @throws ApiError
   */
  public static allThemesAllGet(): CancelablePromise<
    $OpenApiTs["/themes/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/themes/all",
    });
  }

  /**
   * Theme
   * @param data The data for the request.
   * @param data.themeId
   * @returns ThemeDomainEntity Successful Response
   * @throws ApiError
   */
  public static themeThemesThemeIdGet(
    data: $OpenApiTs["/themes/{theme_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/themes/{theme_id}"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/themes/{theme_id}",
      path: {
        theme_id: data.themeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ThemeDomainEntity Successful Response
   * @throws ApiError
   */
  public static createThemesPost(
    data: $OpenApiTs["/themes"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/themes"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/themes",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ThemeDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateThemesPatch(
    data: $OpenApiTs["/themes"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/themes"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/themes",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Add Question
   * @param data The data for the request.
   * @param data.requestBody
   * @returns QuestionDomainEntity Successful Response
   * @throws ApiError
   */
  public static addQuestionThemesQuestionsPost(
    data: $OpenApiTs["/themes/questions"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/themes/questions"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/themes/questions",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Question
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteQuestionThemesQuestionsDelete(
    data: $OpenApiTs["/themes/questions"]["delete"]["req"],
  ): CancelablePromise<$OpenApiTs["/themes/questions"]["delete"]["res"][200]> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/themes/questions",
      query: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.themeId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteThemesThemesIdDelete(
    data: $OpenApiTs["/themes/{themes_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/themes/{themes_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/themes/{themes_id}",
      query: {
        theme_id: data.themeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class ExamsService {
  /**
   * All
   * @returns ExamDomainEntity Successful Response
   * @throws ApiError
   */
  public static allExamsAllGet(): CancelablePromise<
    $OpenApiTs["/exams/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/exams/all",
    });
  }

  /**
   * Teacher Exams
   * @param data The data for the request.
   * @param data.teacherId
   * @returns ExamDomainEntity Successful Response
   * @throws ApiError
   */
  public static teacherExamsExamsTeacherGet(
    data: $OpenApiTs["/exams/teacher"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams/teacher"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/exams/teacher",
      query: {
        teacher_id: data.teacherId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Student Exams
   * @param data The data for the request.
   * @param data.studentId
   * @returns ExamDomainEntity Successful Response
   * @throws ApiError
   */
  public static studentExamsExamsStudentGet(
    data: $OpenApiTs["/exams/student"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams/student"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/exams/student",
      query: {
        student_id: data.studentId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Exam Questions
   * @param data The data for the request.
   * @param data.examId
   * @returns ThemeDomainEntity Successful Response
   * @throws ApiError
   */
  public static examQuestionsExamsQuestionsGet(
    data: $OpenApiTs["/exams/questions"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams/questions"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/exams/questions",
      query: {
        exam_id: data.examId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get
   * @param data The data for the request.
   * @param data.examId
   * @returns QuestionsCount Successful Response
   * @throws ApiError
   */
  public static getExamsQuestionsCountGet(
    data: $OpenApiTs["/exams/questions_count"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/exams/questions_count"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/exams/questions_count",
      query: {
        exam_id: data.examId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Tickets
   * @param data The data for the request.
   * @param data.examId
   * @param data.ticketsCount
   * @param data.questionsCount
   * @param data.taskQuestionsCount
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static ticketsExamsTicketsGet(
    data: $OpenApiTs["/exams/tickets"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams/tickets"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/exams/tickets",
      query: {
        exam_id: data.examId,
        tickets_count: data.ticketsCount,
        questions_count: data.questionsCount,
        task_questions_count: data.taskQuestionsCount,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Exam
   * @param data The data for the request.
   * @param data.examId
   * @returns ExamDomainEntity Successful Response
   * @throws ApiError
   */
  public static examExamsExamIdGet(
    data: $OpenApiTs["/exams/{exam_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams/{exam_id}"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/exams/{exam_id}",
      path: {
        exam_id: data.examId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.examId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteExamsExamIdDelete(
    data: $OpenApiTs["/exams/{exam_id}"]["delete"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams/{exam_id}"]["delete"]["res"][200]> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/exams/{exam_id}",
      path: {
        exam_id: data.examId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ExamDomainEntity Successful Response
   * @throws ApiError
   */
  public static createExamsPost(
    data: $OpenApiTs["/exams"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/exams",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ExamDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateExamsPatch(
    data: $OpenApiTs["/exams"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/exams"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/exams",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class GroupsService {
  /**
   * All Groups
   * @returns GroupDomainEntity Successful Response
   * @throws ApiError
   */
  public static allGroupsGroupsAllGet(): CancelablePromise<
    $OpenApiTs["/groups/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/groups/all",
    });
  }

  /**
   * All Groups Students
   * @returns GroupStudentDomainEntity Successful Response
   * @throws ApiError
   */
  public static allGroupsStudentsGroupsStudentsGet(): CancelablePromise<
    $OpenApiTs["/groups/students"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/groups/students",
    });
  }

  /**
   * Student Group
   * @param data The data for the request.
   * @param data.studentId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static studentGroupGroupsStudentGroupGet(
    data: $OpenApiTs["/groups/student_group"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups/student_group"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/groups/student_group",
      query: {
        student_id: data.studentId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Add Student
   * @param data The data for the request.
   * @param data.groupId
   * @param data.studentId
   * @returns GroupDomainEntity Successful Response
   * @throws ApiError
   */
  public static addStudentGroupsAddStudentPost(
    data: $OpenApiTs["/groups/add_student"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups/add_student"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/groups/add_student",
      query: {
        group_id: data.groupId,
        student_id: data.studentId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Remove Student
   * @param data The data for the request.
   * @param data.studentId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static removeStudentGroupsRemoveStudentPost(
    data: $OpenApiTs["/groups/remove_student"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/groups/remove_student"]["post"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "POST",
      url: "/groups/remove_student",
      query: {
        student_id: data.studentId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Group
   * @param data The data for the request.
   * @param data.groupId
   * @returns GroupDomainEntity Successful Response
   * @throws ApiError
   */
  public static groupGroupsGroupIdGet(
    data: $OpenApiTs["/groups/{group_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups/{group_id}"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/groups/{group_id}",
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.groupId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteGroupsGroupIdDelete(
    data: $OpenApiTs["/groups/{group_id}"]["delete"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups/{group_id}"]["delete"]["res"][200]> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/groups/{group_id}",
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns GroupDomainEntity Successful Response
   * @throws ApiError
   */
  public static createGroupsPost(
    data: $OpenApiTs["/groups"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/groups",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns GroupDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateGroupsPatch(
    data: $OpenApiTs["/groups"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/groups"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/groups",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class QuestionsService {
  /**
   * All
   * @returns QuestionDomainEntity Successful Response
   * @throws ApiError
   */
  public static allQuestionsAllGet(): CancelablePromise<
    $OpenApiTs["/questions/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/questions/all",
    });
  }

  /**
   * Question
   * @param data The data for the request.
   * @param data.questionId
   * @returns QuestionDomainEntity Successful Response
   * @throws ApiError
   */
  public static questionQuestionsQuestionIdGet(
    data: $OpenApiTs["/questions/{question_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/questions/{question_id}"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/questions/{question_id}",
      path: {
        question_id: data.questionId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.questionId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteQuestionsQuestionIdDelete(
    data: $OpenApiTs["/questions/{question_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/questions/{question_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/questions/{question_id}",
      path: {
        question_id: data.questionId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns QuestionDomainEntity Successful Response
   * @throws ApiError
   */
  public static createQuestionsPost(
    data: $OpenApiTs["/questions"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/questions"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/questions",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns QuestionDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateQuestionsPatch(
    data: $OpenApiTs["/questions"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/questions"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/questions",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class CompetenciesService {
  /**
   * All
   * @returns CompetenceDomainEntity Successful Response
   * @throws ApiError
   */
  public static allCompetenciesAllGet(): CancelablePromise<
    $OpenApiTs["/competencies/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/competencies/all",
    });
  }

  /**
   * Competence
   * @param data The data for the request.
   * @param data.competenceId
   * @returns CompetenceDomainEntity Successful Response
   * @throws ApiError
   */
  public static competenceCompetenciesCompetenceIdGet(
    data: $OpenApiTs["/competencies/{competence_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/competencies/{competence_id}"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/competencies/{competence_id}",
      path: {
        competence_id: data.competenceId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.competenceId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteCompetenciesCompetenceIdDelete(
    data: $OpenApiTs["/competencies/{competence_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/competencies/{competence_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/competencies/{competence_id}",
      path: {
        competence_id: data.competenceId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CompetenceDomainEntity Successful Response
   * @throws ApiError
   */
  public static createCompetenciesPost(
    data: $OpenApiTs["/competencies"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/competencies"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/competencies",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CompetenceDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateCompetenciesPatch(
    data: $OpenApiTs["/competencies"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/competencies"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/competencies",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class DisciplinesService {
  /**
   * All
   * @returns DisciplineDomainEntity Successful Response
   * @throws ApiError
   */
  public static allDisciplinesAllGet(): CancelablePromise<
    $OpenApiTs["/disciplines/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/disciplines/all",
    });
  }

  /**
   * Discipline
   * @param data The data for the request.
   * @param data.disciplineId
   * @returns DisciplineDomainEntity Successful Response
   * @throws ApiError
   */
  public static disciplineDisciplinesDisciplineIdGet(
    data: $OpenApiTs["/disciplines/{discipline_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/disciplines/{discipline_id}"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/disciplines/{discipline_id}",
      path: {
        discipline_id: data.disciplineId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.disciplineId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteDisciplinesDisciplineIdDelete(
    data: $OpenApiTs["/disciplines/{discipline_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/disciplines/{discipline_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/disciplines/{discipline_id}",
      path: {
        discipline_id: data.disciplineId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DisciplineDomainEntity Successful Response
   * @throws ApiError
   */
  public static createDisciplinesPost(
    data: $OpenApiTs["/disciplines"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/disciplines"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/disciplines",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DisciplineDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateDisciplinesPatch(
    data: $OpenApiTs["/disciplines"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/disciplines"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/disciplines",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class QualificationsService {
  /**
   * All
   * @returns QualificationDomainEntity Successful Response
   * @throws ApiError
   */
  public static allQualificationsAllGet(): CancelablePromise<
    $OpenApiTs["/qualifications/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/qualifications/all",
    });
  }

  /**
   * Qualification
   * @param data The data for the request.
   * @param data.qualificationId
   * @returns QualificationDomainEntity Successful Response
   * @throws ApiError
   */
  public static qualificationQualificationsQualificationIdGet(
    data: $OpenApiTs["/qualifications/{qualification_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/qualifications/{qualification_id}"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/qualifications/{qualification_id}",
      path: {
        qualification_id: data.qualificationId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.qualificationId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteQualificationsQualificationIdDelete(
    data: $OpenApiTs["/qualifications/{qualification_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/qualifications/{qualification_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/qualifications/{qualification_id}",
      path: {
        qualification_id: data.qualificationId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns QualificationDomainEntity Successful Response
   * @throws ApiError
   */
  public static createQualificationsPost(
    data: $OpenApiTs["/qualifications"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/qualifications"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/qualifications",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns QualificationDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateQualificationsPatch(
    data: $OpenApiTs["/qualifications"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/qualifications"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/qualifications",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class EducationalPracticesService {
  /**
   * All
   * @returns EducationalPracticeDomainEntity Successful Response
   * @throws ApiError
   */
  public static allEducationalPracticesAllGet(): CancelablePromise<
    $OpenApiTs["/educational_practices/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/educational_practices/all",
    });
  }

  /**
   * Student Educational Practices
   * @param data The data for the request.
   * @param data.studentId
   * @returns EducationalPracticeDomainEntity Successful Response
   * @throws ApiError
   */
  public static studentEducationalPracticesEducationalPracticesStudentGet(
    data: $OpenApiTs["/educational_practices/student"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/educational_practices/student"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/educational_practices/student",
      query: {
        student_id: data.studentId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Pages
   * @param data The data for the request.
   * @param data.studentId
   * @param data.educationalPracticeId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static pagesEducationalPracticesPagesGet(
    data: $OpenApiTs["/educational_practices/pages"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/educational_practices/pages"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/educational_practices/pages",
      query: {
        student_id: data.studentId,
        educational_practice_id: data.educationalPracticeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Course Work
   * @param data The data for the request.
   * @param data.educationalPracticeId
   * @returns EducationalPracticeDomainEntity Successful Response
   * @throws ApiError
   */
  public static courseWorkEducationalPracticesEducationalPracticeIdGet(
    data: $OpenApiTs["/educational_practices/{educational_practice_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/educational_practices/{educational_practice_id}"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/educational_practices/{educational_practice_id}",
      path: {
        educational_practice_id: data.educationalPracticeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EducationalPracticeDomainEntity Successful Response
   * @throws ApiError
   */
  public static createEducationalPracticesPost(
    data: $OpenApiTs["/educational_practices"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/educational_practices"]["post"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "POST",
      url: "/educational_practices",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EducationalPracticeDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateEducationalPracticesPatch(
    data: $OpenApiTs["/educational_practices"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/educational_practices"]["patch"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/educational_practices",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.educationalPracticeId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteEducationalPracticesEducationalPracticeIdDelete(
    data: $OpenApiTs["/educational_practices/educational_practice_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/educational_practices/educational_practice_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/educational_practices/educational_practice_id}",
      query: {
        educational_practice_id: data.educationalPracticeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class GraduateThesesService {
  /**
   * All
   * @returns GraduateThesisDomainEntity Successful Response
   * @throws ApiError
   */
  public static allGraduateThesesAllGet(): CancelablePromise<
    $OpenApiTs["/graduate_theses/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/graduate_theses/all",
    });
  }

  /**
   * Student Graduate Theses
   * @param data The data for the request.
   * @param data.studentId
   * @returns GraduateThesisDomainEntity Successful Response
   * @throws ApiError
   */
  public static studentGraduateThesesGraduateThesesStudentGet(
    data: $OpenApiTs["/graduate_theses/student"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/graduate_theses/student"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/graduate_theses/student",
      query: {
        student_id: data.studentId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Pages
   * @param data The data for the request.
   * @param data.studentId
   * @param data.graduateThesisId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static pagesGraduateThesesPagesGet(
    data: $OpenApiTs["/graduate_theses/pages"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/graduate_theses/pages"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/graduate_theses/pages",
      query: {
        student_id: data.studentId,
        graduate_thesis_id: data.graduateThesisId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Course Work
   * @param data The data for the request.
   * @param data.graduateThesisId
   * @returns GraduateThesisDomainEntity Successful Response
   * @throws ApiError
   */
  public static courseWorkGraduateThesesGraduateThesisIdGet(
    data: $OpenApiTs["/graduate_theses/{graduate_thesis_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/graduate_theses/{graduate_thesis_id}"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/graduate_theses/{graduate_thesis_id}",
      path: {
        graduate_thesis_id: data.graduateThesisId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns GraduateThesisDomainEntity Successful Response
   * @throws ApiError
   */
  public static createGraduateThesesPost(
    data: $OpenApiTs["/graduate_theses"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/graduate_theses"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/graduate_theses",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns GraduateThesisDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateGraduateThesesPatch(
    data: $OpenApiTs["/graduate_theses"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/graduate_theses"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/graduate_theses",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.graduateThesisId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteGraduateThesesCourseWorkIdDelete(
    data: $OpenApiTs["/graduate_theses/{course_work_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/graduate_theses/{course_work_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/graduate_theses/{course_work_id}",
      query: {
        graduate_thesis_id: data.graduateThesisId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class CourseWorksService {
  /**
   * All
   * @returns CourseWorkDomainEntity Successful Response
   * @throws ApiError
   */
  public static allCourseWorksAllGet(): CancelablePromise<
    $OpenApiTs["/course_works/all"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/course_works/all",
    });
  }

  /**
   * Student Course Works
   * @param data The data for the request.
   * @param data.studentId
   * @returns CourseWorkDomainEntity Successful Response
   * @throws ApiError
   */
  public static studentCourseWorksCourseWorksStudentGet(
    data: $OpenApiTs["/course_works/student"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/course_works/student"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/course_works/student",
      query: {
        student_id: data.studentId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Pages
   * @param data The data for the request.
   * @param data.studentId
   * @param data.courseWorkId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static pagesCourseWorksPagesGet(
    data: $OpenApiTs["/course_works/pages"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/course_works/pages"]["get"]["res"][200]> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/course_works/pages",
      query: {
        student_id: data.studentId,
        course_work_id: data.courseWorkId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Course Work
   * @param data The data for the request.
   * @param data.courseWorkId
   * @returns CourseWorkDomainEntity Successful Response
   * @throws ApiError
   */
  public static courseWorkCourseWorksCourseWorkIdGet(
    data: $OpenApiTs["/course_works/{course_work_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/course_works/{course_work_id}"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/course_works/{course_work_id}",
      path: {
        course_work_id: data.courseWorkId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete
   * @param data The data for the request.
   * @param data.courseWorkId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteCourseWorksCourseWorkIdDelete(
    data: $OpenApiTs["/course_works/{course_work_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/course_works/{course_work_id}"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/course_works/{course_work_id}",
      path: {
        course_work_id: data.courseWorkId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CourseWorkDomainEntity Successful Response
   * @throws ApiError
   */
  public static createCourseWorksPost(
    data: $OpenApiTs["/course_works"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/course_works"]["post"]["res"][200]> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/course_works",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CourseWorkDomainEntity Successful Response
   * @throws ApiError
   */
  public static updateCourseWorksPatch(
    data: $OpenApiTs["/course_works"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/course_works"]["patch"]["res"][200]> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/course_works",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}
